.SECTION .DATA
	FRAME_WIDTH: .WORD 0620
	FRAME_HEIGHT: .WORD 0454
	FRAME_WIDTH_BYTES: .WORD 0144
	FRAME_BUFFER_OFFSET: .WORD 0040000
	SYMBOL_IMAGE_SIZE: .WORD 020
	A_W0: .WORD 0xFFFF

.SECTION .CODE
.GLOBAL MAIN

MAIN:
	MOV 0000000, -(R6)
	MOV 0000030, -(R6)
	MOV 0000007, -(R6)
	JSR R5, PRINT_SCREEN_CHAR_FUNCTION
	ADD 6, R6

	MOV 0000010, -(R6)
	MOV 0000030, -(R6)
	MOV 0000004, -(R6)
	JSR R5, PRINT_SCREEN_CHAR_FUNCTION
	ADD 6, R6

	MOV 0000020, -(R6)
	MOV 0000030, -(R6)
	MOV 0000013, -(R6)
	JSR R5, PRINT_SCREEN_CHAR_FUNCTION
	ADD 6, R6

	MOV 0000030, -(R6)
	MOV 0000030, -(R6)
	MOV 0000013, -(R6)
	JSR R5, PRINT_SCREEN_CHAR_FUNCTION
	ADD 6, R6

	MOV 0000040, -(R6)
	MOV 0000030, -(R6)
	MOV 0000016, -(R6)
	JSR R5, PRINT_SCREEN_CHAR_FUNCTION
	ADD 6, R6

MAIN_END:
	HALT

PRINT_SCREEN_CHAR_FUNCTION:
	# Operands: x, y, char_code
	# Old R5 value: SP+0
	# char_code: SP+2
	# y: SP+4
	# x: SP+6

	# line_printed
	MOV 0000000, -(R6)
	# vram_line_offset
	MOV (FRAME_BUFFER_OFFSET), -(R6)
	# tmp
	MOV 0000000, -(R6)
	ASR 12(R6)
	ASR 12(R6)
	ADD 12(R6), 2(R6)
	
	# New stack state:
	# tmp: SP+0
	# vram_line_offset: SP+2
	# line_printed: SP+4
	# Old Reg value: SP+6
	# char_code: SP+8
	# y: SP+10
	# x: SP+12
		
	PRINT_SCREEN_CHAR_H_OFFSET_LOOP:
		CMP 0(R6), 10(R6)
		BEQ PRINT_SCREEN_CHAR_LOAD_SYMBOL
		ADD (FRAME_WIDTH_BYTES), 2(R6)
		INC 0(R6)
		BR PRINT_SCREEN_CHAR_H_OFFSET_LOOP

	PRINT_SCREEN_CHAR_LOAD_SYMBOL:
		MOV A_W0, 0(R6)

	PRINT_SCREEN_CHAR_LOAD_SYMBOL_LOOP:
		CMP 4(R6), 8(R6)
		BEQ PRINT_SCREEN_CHAR_RENDERING
		ADD (SYMBOL_IMAGE_SIZE), 0(R6)
		INC 4(R6)
		BR PRINT_SCREEN_CHAR_LOAD_SYMBOL_LOOP

	PRINT_SCREEN_CHAR_RENDERING:
		CLR 4(R6)

	PRINT_SCREEN_CHAR_RENDERING_LOOP:
		CMP 4(R6), 8
		BEQ PRINT_SCREEN_CHAR_END
		MOV @0(R6), @2(R6)
		ADD (FRAME_WIDTH_BYTES), 2(R6)
		INC 4(R6)
		INC 0(R6)
		INC 0(R6)
		BR PRINT_SCREEN_CHAR_RENDERING_LOOP

	PRINT_SCREEN_CHAR_END:
		ADD 6, R6
		RST R5
